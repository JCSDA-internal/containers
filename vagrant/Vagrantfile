# This Vagrantfile is a modified version of that provided by the
# Charliecloud project
# https://hpc.github.io/charliecloud
#
# This will build a Vagrant virtual machine that is provisioned to
# run both Charliecloud and Singularity 3.0.  This should allow you
# to pull the JEDI image of your choice, enter the container,
# build, and run JEDI as described in the JEDI Docs.
#
# ==================================================================
# Comments from Charliecloud team
# This Vagrantfile builds a Centos 7 virtual machine with Charliecloud and
# Singularity installed. 

# A few design decisions:
#
# 1. We use the CentOS kernel (3.10 + lots of Red Hat patches) because it's
#    easier than installing the upstream kernel and seems to work fine once
#    user namespaces are turned on. Please let us know of any problems.
#
# 2. /tmp is the CentOS default: simply a directory on the root filesystem,
#    but cleaned out on each boot. This is to avoid (a) configuring it to be a
#    tmpfs and (b) to save swap.
#
# 3. We don't try any clever sizing of the VM appliance (e.g., number of
#    vCPUs, RAM). End users should adjust these values, but we want to leave
#    reasonable defaults in case they don't, even if they have a smallish
#    host. For example, we don't want to configure the appliance to take
#    advantage of your 96-core Beast Machine and then give it to some poor end
#    user to run that 96-vCPU VM on their 4-core laptop.
#
# 4. No OpenMPI is installed. This saves build time, a little disk space, and
#    the complexity of finding the right version to match the Charliecloud
#    examples, while the cost is low: a few tests are skipped. Users who want
#    to run single-node MPI apps in the VM should launch from within ch-run.
# ==================================================================


Vagrant.require_version ">= 2.1.3"
Vagrant.configure("2") do |c|

  c.vm.box = "centos/7"         # https://app.vagrantup.com/centos/boxes/7
  c.vm.box_version = "~>1809"   # updates: https://blog.centos.org/?s=vagrant
  c.vm.box_check_update = true  # warn if base box out of date

  c.vm.hostname = "jedibox"
  c.vagrant.plugins = ['vagrant-disksize',
                       'vagrant-proxyconf',
                       'vagrant-reload',
                       'vagrant-vbguest']

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  c.vm.synced_folder "vagrant_data", "/home/vagrant/vagrant_data"

  # Note: Vagrant sets up a port mapping from localhost:2222 to jedibox:22
  # automatically, so we need no repeat that here.

  # Set up proxies if appropriate.
  if ENV["HTTP_PROXY"] or ENV["HTTPS_PROXY"] or ENV["NO_PROXY"]
    if not (ENV["HTTP_PROXY"] and ENV["HTTPS_PROXY"] and ENV["NO_PROXY"])
      abort("missing proxy variable(s): HTTP_PROXY HTTPS_PROXY and/or NO_PROXY")
    end
    c.proxy.http = ENV["HTTP_PROXY"]
    c.proxy.https = ENV["HTTPS_PROXY"]
    c.proxy.no_proxy = ENV["NO_PROXY"]
    c.vm.provision "proxy", type:"shell", privileged: true, inline: <<-EOF
      echo 'Defaults env_keep+="ALL_PROXY all_proxy auto_proxy RSYNC_PROXY"' \
          >> /etc/sudoers.d/proxy
    EOF
  end

  # Configure the appliance.
  c.vm.provider "virtualbox" do |vb|
    vb.name = "jedibox"
    vb.gui = false
    vb.memory = "4096"
    vb.cpus = 6
    c.disksize.size = '96GB'  # see also provisioner "disksize" below
    vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
  end

  # Install a decent user environment.
  c.vm.provision "environment", type: "shell", privileged: true,
                 inline: <<-EOF
    set -e
    cd /tmp

    # Basic stuff from standard repos.
    yum makecache fast
    yum-config-manager --setopt=deltarpm=0 --save
    yum -y upgrade
    yum -y install emacs \
                   vim \
                   wget

    # Git from IUS. This also activates EPEL.
    wget https://centos7.iuscommunity.org/ius-release.rpm
    yum -y install epel-release
    rpm --install ius-release.rpm
    yum -y install git2u

    # Utilities to make the shell scripts faster and more usable.
    yum -y install pigz pv

    # Add /usr/local/{bin,sbin} to $PATH.
    echo 'export PATH=/usr/local/sbin:/usr/local/bin:$PATH' > /etc/profile.d/path.sh
  EOF

  # Expand the root filesystem to use the full resized disk. This is needed so
  # the full-scope tests can finish. Notes:
  #
  #   1. This is specific to the provisioning scheme selected by the base box.
  #      See issue #285.
  #
  #   2. We install parted from Fedora 23 because the version of parted in
  #      CentOS 7 (3.1-29) won't resize mounted partitions. Fedora 23's parted
  #      is apparently the newest whose dependencies CentOS 7 still meets.
  #
  #   3. ---pretend-input-tty is an undocumented option (note third hyphen) to
  #      convince parted to accept "yes" to the warning even without a TTY.
  #      See: https://unix.stackexchange.com/a/365657
  #
  c.vm.provision "disksize", type: "shell", privileged: true,
                 inline: <<-EOF
    set -e
    cd /tmp

    yum -y install e2fsprogs
    wget -nv https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/23/Everything/x86_64/os/Packages/p/parted-3.2-11.fc23.x86_64.rpm
    rpm --upgrade parted-*.x86_64.rpm

    parted /dev/sda ---pretend-input-tty resizepart 1 yes 100%
    parted /dev/sda p
    resize2fs /dev/sda1
    df -h
  EOF

  # Configure namespaces. This needs a reboot for the kernel command line
  # update to take effect.
  #
  # Note: This could be skipped if we installed an upstream kernel (e.g., via
  # ElRepo). However, we're not aware of any advantages vs. the CentOS kernel
  # for this use case.
  c.vm.provision "namespaces", type: "shell", privileged: true,
                 inline: <<-EOF
    set -e
    echo 'user.max_user_namespaces = 32767' > /etc/sysctl.d/51-userns.conf
    grubby --args='namespace.unpriv_enable=1' --update-kernel=ALL
  EOF
  c.vm.provision :reload

  # Install Charliecloud.
  c.vm.provision "charliecloud", type: "shell", privileged: false,
                 env: { "CH_VERSION" => ENV["CH_VERSION"] },
                 inline: <<-EOF
    set -e
    sudo tee /etc/profile.d/charliecloud.sh << 'EOF2'
export CH_TEST_TARDIR=/var/tmp/tarballs
export CH_TEST_IMGDIR=/var/tmp/images
export CH_TEST_PERMDIRS=skip
EOF2

    cd /usr/local/src
    sudo chmod 1777 .
    git clone --recursive https://github.com/hpc/charliecloud.git

    cd charliecloud
    if [[ $CH_VERSION ]]; then
      git checkout $CH_VERSION
    fi
    make
    examples/syscalls/pivot_root
    sudo make install PREFIX=/usr/local
    which ch-run
    ch-run --version
  EOF

  # Twiddle vagrant user so Charliecloud tests will pass (add to a second
  # group, and permit sudo to UID 0 and GID != 0).
  c.vm.provision "vagrant-user", type: "shell", privileged: true,
                 inline: <<-EOF
    set -e
    usermod -aG users vagrant
    echo '%vagrant ALL=(ALL:ALL) NOPASSWD: ALL' > /etc/sudoers.d/vagrant
  EOF

  # Remove unneeded packages.
  c.vm.provision "cleanup", type: "shell", privileged: true,
                 inline: <<-EOF
    set -e
    package-cleanup -y --oldkernels --count=1
  EOF

  # Test Charliecloud (optional).
  #
  # Note: This will grow the image quite a bit. Don't run it before taking the
  # snapshot to be distributed to end users.
  c.vm.provision "test", type: "shell", run: "never", privileged: false,
                 env: { "CH_TEST_SCOPE" => "full" },
                 inline: <<-EOF
    set -e
    if ( id -u charlie ); then
        user=charlie
    else
        user=vagrant
    fi
    echo "testing as: $user"
    sudo -iu $user -- sh -c "\
   cd /usr/local/share/doc/charliecloud/test \
&& CH_TEST_SCOPE=$CH_TEST_SCOPE make test"
  EOF

  # Install Singularity
  c.vm.provision "singularity", type: "shell", privileged: true,
                 inline: <<-EOF
    set -e
    cd /tmp

    # package dependencies
    yum install -y openssl-devel libuuid-devel

    # install Go
    export VERSION=1.11.2 OS=linux ARCH=amd64
    wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz
    tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz
    echo 'export GOPATH=${HOME}/go' >> ~/.bashrc
    echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc
    source ~/.bashrc

    # build and install Singularity
    mkdir -p $GOPATH/src/github.com/sylabs
    cd $GOPATH/src/github.com/sylabs
    git clone https://github.com/sylabs/singularity.git
    cd singularity
    go get -u -v github.com/golang/dep/cmd/dep
    cd $GOPATH/src/github.com/sylabs/singularity
    ./mconfig
    make -C builddir
    sudo make -C builddir install

  EOF

end


# vi: set ft=ruby
