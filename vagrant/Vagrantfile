# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  #
  # Set disk size
  required_plugins = %w( vagrant-vbguest vagrant-disksize )
  _retry = false
  required_plugins.each do |plugin|
      unless Vagrant.has_plugin? plugin
          system "vagrant plugin install #{plugin}"
          _retry=true
      end
  end

  if (_retry)
      exec "vagrant " + ARGV.join(' ')
  end

  config.disksize.size = "64GB"

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-20.04"

  # provision the VM with docker
  #config.vm.provision "docker"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./vagrant_data", "/home/vagrant/vagrant_data",
     mount_options: ["dmode=775,fmode=777"]

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
     # Customize the name of your VM:
     vb.name = "jedibox"

     # Customize the amount of memory on the VM:
     vb.memory = "12288"

     # Customize the number of cores in the VM:
     vb.cpus = "12"
   end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # provision with a basic user environment
  config.vm.provision "environment", type: "shell", privileged: true,
                       inline: <<-EOF
    set -e
    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y build-essential python3 gcc curl python3-pip
    apt-get install -y autoconf pkg-config libtool autoconf-archive
    apt-get update
  EOF

  # basic installation of Charliecloud - skip the tests
  config.vm.provision "charliecloud", type: "shell", privileged: false,
                       inline: <<-EOF
    set -e
    export DEBIAN_FRONTEND=noninteractive
    mkdir -p $HOME/build
    cd $HOME/build
    git clone --recursive https://github.com/hpc/charliecloud.git
    cd charliecloud
    ./autogen.sh
    ./configure --prefix=/usr/local --disable-tests --disable-html
    make
    sudo make install
    cd $HOME
    rm -rf $HOME/build
  EOF

  # Install Singularity
  config.vm.provision "singularity", type: "shell", privileged: false,
                      inline: <<-EOF
    set -e
    export DEBIAN_FRONTEND=noninteractive

    # package dependencies
    sudo apt-get install -y libssl-dev uuid-dev libgpgme11-dev squashfs-tools libseccomp-dev pkg-config cryptsetup

    # install Go
    cd $HOME
    export VERSION=1.15.8 OS=linux ARCH=amd64
    wget -O /tmp/go${VERSION}.${OS}-${ARCH}.tar.gz https://dl.google.com/go/go${VERSION}.${OS}-${ARCH}.tar.gz

    echo 'export GOPATH=${HOME}/go' >> ~/.bashrc
    echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> $HOME/.bashrc
    sudo tar -C /usr/local -xzf /tmp/go${VERSION}.${OS}-${ARCH}.tar.gz
    echo 'export GOPATH=${HOME}/go' >> ~/.bashrc && \
    echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc && \
    export GOPATH=${HOME}/go
    export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin

    # optional
    curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh |
    sh -s -- -b $(go env GOPATH)/bin v1.21.0

    # build and install Singularity
    VERSION=3.8.0
    mkdir -p ${GOPATH}/src/github.com/sylabs
    cd ${GOPATH}/src/github.com/sylabs
    git clone https://github.com/sylabs/singularity.git
    cd singularity
    git checkout v${VERSION}
    ./mconfig -p /usr/local
    cd ./builddir
    make
    sudo make install

  EOF


  # Enable X-Forwarding
  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true

end
