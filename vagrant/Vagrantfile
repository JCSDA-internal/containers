# -*- mode: ruby -*-
# vi: set ft=ruby :

# This Vagrantfile is a modified version of that provided by the
# Charliecloud project
# https://hpc.github.io/charliecloud
#
# This will build a Vagrant virtual machine that is provisioned to
# run both Charliecloud and Singularity 3.0.  This should allow you
# to pull the JEDI image of your choice, enter the container,
# build, and run JEDI as described in the JEDI Docs.
# Provided by JCSDA, 2018
#
# ==================================================================
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # plug-ins used by charliecloud
  config.vagrant.plugins = ['vagrant-disksize',
                            'vagrant-proxyconf',
                            'vagrant-reload',
                            'vagrant-vbguest']

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  #config.vm.synced_folder "./vagrant_data", "/vagrant_data"
  config.vm.synced_folder "./vagrant_data", "/home/vagrant/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
     vb.name = "jedibox"
     vb.gui = false
  
    # Customize the amount of memory and virtual cpus on the VM:
    vb.memory = "4096"
    vb.cpus = 6
    config.disksize.size = '96GB'  # see also provisioner "disksize" below
    vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Install a decent user environment.
  config.vm.provision "environment", type: "shell", privileged: true,
                       inline: <<-EOF
    set -e
    cd /tmp

    # Basic stuff from standard repos.
    yum makecache fast
    yum-config-manager --setopt=deltarpm=0 --save
    yum -y upgrade
    yum -y install emacs \
                   vim \
                   wget

    # Git from IUS. This also activates EPEL.
    #wget https://centos7.iuscommunity.org/ius-release.rpm
    #yum -y install epel-release
    #rpm --install ius-release.rpm
    #yum -y install git2u
    yum -y install git

    # Utilities to make the shell scripts faster and more usable.
    #yum -y install pigz pv

    # Add /usr/local/{bin,sbin} to $PATH.
    echo 'export PATH=/usr/local/sbin:/usr/local/bin:$PATH' > /etc/profile.d/path.sh

    # Add /usr/local/lib to link path
    echo 'export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH' >> /etc/profile.d/path.sh
  EOF

  # Expand the root filesystem to use the full resized disk. This is needed so
  # the full-scope tests can finish. Notes:
  #
  #   1. This is specific to the provisioning scheme selected by the base box.
  #      See issue #285.
  #
  #   2. We install parted from Fedora 23 because the version of parted in
  #      CentOS 7 (3.1-29) won't resize mounted partitions. Fedora 23's parted
  #      is apparently the newest whose dependencies CentOS 7 still meets.
  #
  #   3. ---pretend-input-tty is an undocumented option (note third hyphen) to
  #      convince parted to accept "yes" to the warning even without a TTY.
  #      See: https://unix.stackexchange.com/a/365657
  #
  #config.vm.provision "disksize", type: "shell", privileged: true,
  #               inline: <<-EOF
  #  set -e
  #  cd /tmp
  #
  #  yum -y install e2fsprogs
  #  wget -nv https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/23/Everything/x86_64/os/Packages/p/parted-3.2-11.fc23.x86_64.rpm
  #  rpm --upgrade parted-*.x86_64.rpm
  #
  #  parted /dev/sda ---pretend-input-tty resizepart 1 yes 100%
  #  parted /dev/sda p
  #  resize2fs /dev/sda1
  #  df -h
  #EOF

  # Configure namespaces. This needs a reboot for the kernel command line
  # update to take effect.
  #
  # Note: This could be skipped if we installed an upstream kernel (e.g., via
  # ElRepo). However, we're not aware of any advantages vs. the CentOS kernel
  # for this use case.
  config.vm.provision "namespaces", type: "shell", privileged: true,
                 inline: <<-EOF
    set -e
    echo 'user.max_user_namespaces = 32767' > /etc/sysctl.d/51-userns.conf
    grubby --args='namespace.unpriv_enable=1' --update-kernel=ALL
  EOF
  config.vm.provision :reload

  # Uncomment to Install Docker (not required).
  # vagrant-proxyconf for Docker doesn't seem to work, so do it manually.
#  config.vm.provision "docker", type: "shell", privileged: true,
#                 inline: <<-EOF
#    set -e
#    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
#    yum -y install docker-ce
#    systemctl enable docker
#    systemctl daemon-reload
#    systemctl restart docker
#    systemctl show --property=Environment docker
#    docker run hello-world
#  EOF

  # Install Charliecloud.
  config.vm.provision "charliecloud", type: "shell", privileged: false,
                      env: { "CH_VERSION" => ENV["CH_VERSION"] },
                      inline: <<-EOF
    set -e
    sudo tee /etc/profile.d/charliecloud.sh << 'EOF2'
export CH_TEST_TARDIR=/var/tmp/tarballs
export CH_TEST_IMGDIR=/var/tmp/images
export CH_TEST_PERMDIRS=skip
EOF2

    cd /usr/local/src
    sudo chmod 1777 .
    git clone --recursive https://github.com/hpc/charliecloud.git

    cd charliecloud
    if [[ $CH_VERSION ]]; then
      git checkout $CH_VERSION
    fi
    make
    examples/syscalls/pivot_root
    sudo make install PREFIX=/usr/local
    which ch-run
    ch-run --version
  EOF

  # Install Singularity
  config.vm.provision "singularity", type: "shell", privileged: true,
                      inline: <<-EOF
    set -e

    # package dependencies
    yum install -y openssl-devel libuuid-devel

    # install Go
    export VERSION=1.11.2 OS=linux ARCH=amd64
    wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz
    tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz
    echo 'export GOPATH=${HOME}/go' >> ~/.bashrc
    echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc
    source ~/.bashrc
    rm -f go$VERSION.$OS-$ARCH.tar.gz

    # build and install Singularity
    mkdir -p $GOPATH/src/github.com/sylabs
    cd $GOPATH/src/github.com/sylabs
    git clone https://github.com/sylabs/singularity.git
    cd singularity
    go get -u -v github.com/golang/dep/cmd/dep
    cd $GOPATH/src/github.com/sylabs/singularity
    ./mconfig
    make -C builddir
    make -C builddir install

  EOF


end
