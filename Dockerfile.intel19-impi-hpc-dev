FROM ubuntu:18.04 AS build

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        apt-utils \
        build-essential \
        gnupg2 && \
    rm -rf /var/lib/apt/lists/*

RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157 && \
    apt-get update

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        bc \
        bison \
        csh \
        curl \
        dirmngr \
        doxygen \
        emacs \
        file \
        flex \
        git \
        git \
        git-flow \
        graphviz \
        ksh \
        less \
        libasound2 \
        libcurl4-openssl-dev \
        libexpat1-dev \
        libgtk2.0-common \
        libncurses-dev \
        libpango-1.0.0 \
        libssl-dev \
        libx11-dev \
        libxml2-dev \
        lsb-release \
        lynx \
        man-db \
        nano \
        nedit \
        openssh-server \
        screen \
        software-properties-common \
        swig \
        tcl \
        tcsh \
        texinfo \
        texlive-latex-recommended \
        tk \
        unzip \
        vim \
        wget \
        wish \
        xserver-xorg && \
    rm -rf /var/lib/apt/lists/*

# OFED
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        dapl2-utils \
        ibutils \
        ibverbs-providers \
        ibverbs-utils \
        infiniband-diags \
        libdapl-dev \
        libdapl2 \
        libibmad-dev \
        libibmad5 \
        libibverbs-dev \
        libibverbs1 \
        librdmacm-dev \
        librdmacm1 \
        rdmacm-utils && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libpmi0 \
        libpmi0-dev && \
    rm -rf /var/lib/apt/lists/*

# KNEM version 1.1.3
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        ca-certificates \
        git && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 --branch knem-1.1.3 https://gforge.inria.fr/git/knem/knem.git knem && cd - && \
    mkdir -p /usr/local/knem/include && \
    cp /var/tmp/knem/common/*.h /usr/local/knem/include && \
    rm -rf /var/tmp/knem
ENV CPATH=/usr/local/knem/include:$CPATH

# XPMEM branch master
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        ca-certificates \
        file \
        git \
        libtool \
        make && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 --branch master https://gitlab.com/hjelmn/xpmem.git xpmem && cd - && \
    cd /var/tmp/xpmem && autoreconf --install && \
    cd /var/tmp/xpmem &&   ./configure --prefix=/usr/local/xpmem --disable-kernel-module && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/xpmem
ENV CPATH=/usr/local/xpmem/include:$CPATH \
    LD_LIBRARY_PATH=/usr/local/xpmem/lib:$LD_LIBRARY_PATH \
    LIBRARY_PATH=/usr/local/xpmem/lib:$LIBRARY_PATH

# UCX version 1.7.0
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        binutils-dev \
        file \
        libnuma-dev \
        make \
        wget && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://github.com/openucx/ucx/releases/download/v1.7.0/ucx-1.7.0.tar.gz && \
    mkdir -p /var/tmp && tar -x -f /var/tmp/ucx-1.7.0.tar.gz -C /var/tmp -z && \
    cd /var/tmp/ucx-1.7.0 &&   ./configure --prefix=/usr/local/ucx --disable-assertions --disable-debug --disable-doxygen-doc --disable-logging --disable-params-check --enable-optimizations --with-knem --with-rdmacm --with-verbs --with-xpmem --without-cuda && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    rm -rf /var/tmp/ucx-1.7.0.tar.gz /var/tmp/ucx-1.7.0
ENV LD_LIBRARY_PATH=/usr/local/ucx/lib:$LD_LIBRARY_PATH \
    PATH=/usr/local/ucx/bin:$PATH

# Intel Parallel Studio XE
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        build-essential \
        cpio && \
    rm -rf /var/lib/apt/lists/*
COPY ./intel_tarballs/parallel_studio_xe_2019_update5_cluster_edition.tgz /var/tmp/parallel_studio_xe_2019_update5_cluster_edition.tgz
COPY ./intel_license/COM_L___LXMW-67CW6CHW.lic /var/tmp/license.lic
RUN mkdir -p /var/tmp && tar -x -f /var/tmp/parallel_studio_xe_2019_update5_cluster_edition.tgz -C /var/tmp -z && \
    sed -i -e 's/^#\?\(COMPONENTS\)=.*/\1=DEFAULTS/g' \
        -e 's|^#\?\(PSET_INSTALL_DIR\)=.*|\1=/opt/intel|g' \
        -e 's/^#\?\(ACCEPT_EULA\)=.*/\1=accept/g' \
        -e 's/^#\?\(ACTIVATION_TYPE\)=.*/\1=license_file/g' \
        -e 's|^#\?\(ACTIVATION_LICENSE_FILE\)=.*|\1=/var/tmp/license.lic|g' /var/tmp/parallel_studio_xe_2019_update5_cluster_edition/silent.cfg && \
    cd /var/tmp/parallel_studio_xe_2019_update5_cluster_edition && ./install.sh --silent=silent.cfg && \
    rm -rf /var/tmp/parallel_studio_xe_2019_update5_cluster_edition.tgz /var/tmp/parallel_studio_xe_2019_update5_cluster_edition
RUN echo "source /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh intel64" >> /etc/bash.bashrc

# CMake version 3.13.0
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        make \
        wget && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://cmake.org/files/v3.13/cmake-3.13.0-Linux-x86_64.sh && \
    mkdir -p /usr/local && \
    /bin/sh /var/tmp/cmake-3.13.0-Linux-x86_64.sh --prefix=/usr/local --skip-license && \
    rm -rf /var/tmp/cmake-3.13.0-Linux-x86_64.sh
ENV PATH=/usr/local/bin:$PATH

RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \
    apt-get update && \
    apt-get install -y --no-install-recommends git-lfs && \
    git lfs install

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python3-dev \
        python3-pip \
        python3-scipy \
        python3-yaml && \
    rm -rf /var/lib/apt/lists/*

RUN ln -s /usr/bin/python3 /usr/bin/python

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata locales && \
    ln -fs /usr/share/zoneinfo/America/Denver /etc/localtime && \
    locale-gen --purge en_US.UTF-8 && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    update-locale "LANG=en_US.UTF-8" && \
    update-locale "LANGUAGE=en_US:en"

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en

ENV BOOST_ROOT=/usr/local \
    CC=mpiicc \
    CXX=mpiicpc \
    EIGEN3_INCLUDE_DIR=/usr/local \
    FC=mpiifort \
    HDF5_ROOT=/usr/local \
    MPI_CC=mpiicc \
    MPI_CXX=mpiicpc \
    MPI_FC=mpiifort \
    NETCDF=/usr/local \
    NETCDF_ROOT=/usr/local \
    PIO=/usr/local \
    PNETCDF=/usr/local \
    SERIAL_CC=icc \
    SERIAL_CXX=icpc \
    SERIAL_FC=ifort

RUN cd /root && \
    git clone https://github.com/jcsda/jedi-stack.git && \
    cd jedi-stack/buildscripts && \
    git checkout feature/intel-hpc-container && \
    ./build_stack.sh "container-intel-impi-dev" && \
    mv ../jedi-stack-contents.log /etc && \
    chmod a+r /etc/jedi-stack-contents.log && \
    rm -rf /root/jedi-stack && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir /worktmp

RUN echo "export FC=mpiifort" >> /etc/bash.bashrc && \
    echo "export CC=mpiicc" >> /etc/bash.bashrc && \
    echo "export CXX=mpiicpc" >> /etc/bash.bashrc && \
    echo "export PATH=/usr/local/bin:$PATH" >> /etc/bash.bashrc && \
    echo "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> /etc/bash.bashrc && \
    echo "export LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH" >> /etc/bash.bashrc && \
    echo "export PYTHONPATH=/usr/local/lib:$PYTHONPATH" >> /etc/bash.bashrc

ENV LD_LIBRARY_PATH=/opt/intel/compilers_and_libraries_2019/linux/lib/intel64_lin:/usr/local

COPY ssh-key/github_academy_rsa /root/github_academy_rsa

SHELL ["/bin/bash", "-c"]

RUN source /opt/intel/compilers_and_libraries/linux/bin/compilervars.sh intel64 && \
    mkdir -p /root/.ssh && \
    mv /root/github_academy_rsa /root/.ssh/github_academy_rsa && \
    eval "$(ssh-agent -s)" && \
    ssh-add /root/.ssh/github_academy_rsa && \
    export CC=mpiicc && \
    export CXX=mpiicpc && \
    export FC=mpiifort && \
    ssh -T -o "StrictHostKeyChecking=no" git@github.com; mkdir -p /jedi && \
    cd /jedi && \
    git clone git@github.com:jcsda/fv3-bundle.git && \
    cd /jedi/fv3-bundle && \
    git clone git@github.com:jcsda/fckit.git -b develop && \
    git clone git@github.com:jcsda/crtm.git -b develop && \
    git clone git@github.com:jcsda/saber.git -b develop && \
    git clone git@github.com:jcsda/oops.git -b develop && \
    git clone git@github.com:jcsda/ioda.git -b develop && \
    git clone git@github.com:jcsda/ufo.git -b develop && \
    git clone git@github.com:jcsda/fms.git -b dev/master-ecbuild && \
    git clone git@github.com:jcsda/femps.git -b develop && \
    git clone git@github.com:jcsda/fv3-jedi-linearmodel.git -b develop fv3-jedi-lm && \
    git clone git@github.com:jcsda/fv3-jedi.git -b develop && \
    mkdir -p /jedi/build && \
    cd /jedi/build && \
    ecbuild --build=Release ../fv3-bundle && \
    make -j4 && \
    chmod -R 777 /jedirm /root/.ssh/github_academy_rsa


